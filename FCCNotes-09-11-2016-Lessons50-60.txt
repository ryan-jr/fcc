# FCC Notes
# 09-11-2016

# Add Different Margins to Each Side of an Element

Sometimes you will want to customize an element so that it has a different margin on each of its sides.

CSS allows you to control the margin of an element on all four sides with margin-top, margin-right, margin-bottom, and margin-left properties.

CODE:
  .green-box {
    background-color: green;
    margin-top: 40px;
    margin-left: 20px;
    margin-right: 20px;
    margin-bottom: 40px;
    
  }
  
  
# Use Clockwise Notation to Specify the Padding of an Element


Instead of specifying an element's padding-top, padding-right, padding-bottom, and padding-left properties, you can specify them all in one line, like this:

padding: 10px 20px 10px 20px;

CODE:
  .green-box {
    background-color: green;
    padding: 40px 20px 20px 40px
  }
  
# Use Clockwise Notation to Specify the Margin of an Element


Instead of specifying an element's margin-top, margin-right, margin-bottom, and margin-left properties, you can specify them all in one line, like this:

margin: 10px 20px 10px 20px;

These four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific margin instructions.

CODE:

  .green-box {
    background-color: green;
    margin: 40px 20px 20px 40px
  }
  

# Style the HTML Body Element

Now let's start fresh and talk about CSS inheritance.

Every HTML page has a body element.

We can prove that the body element exists here by giving it a background-color of black.

We can do this by adding the following to our style element:

body {
  background-color: black;
}

CODE:

<style>
  body { 
  background-color: black;
  
  }
</style>


# Inherit Styles from the Body Element

Now we've proven that every HTML page has a body element, and that its body element can also be styled with CSS.

Remember, you can style your body element just like any other HTML element, and all your other elements will inherit your body element's styles.


<style>
  body {
    background-color: black;
    color: green;
    font-family: Monospace;
  }

</style>

<h1> Hello World </h1>

Sometimes your HTML elements will receive multiple styles that conflict with one another.


# Prioritize One Style Over Another

For example, your h1 element can't be both green and pink at the same time.

CODE:
<style>
  body {
    background-color: black;
    font-family: Monospace;
    color: green;
  }
  
  
  CODE:


  .pink-text {
    color: pink;
    
    
  }
</style>
<h1 class="pink-text">Hello World!</h1>

# Override Styles in Subsequent CSS


Our "pink-text" class overrode our body element's CSS declaration!

We just proved that our classes will override the body element's CSS. So the next logical question is, what can we do to override our pink-text class?

Create an additional CSS class called blue-text that gives an element the color blue. Make sure it's below your pink-text class declaration.

Apply the blue-text class to your h1 element in addition to your pink-text class, and let's see which one wins.

Applying multiple class attributes to a HTML element is done with a space between them like this:

class="class1 class2"


# Override Class Declarations by Styling ID Attributes

There are other ways that you can override CSS. Do you remember id attributes?

Let's override your pink-text and blue-text classes, and make your h1 element orange, by giving the h1 element an id and then styling that id.

Give your h1 element the id attribute of orange-text. Remember, id styles look like this:

<h1 id="orange-text">

Leave the blue-text and pink-text classes on your h1 element.

Create a CSS declaration for your orange-text id in your style element. Here's an example of what this looks like:

#brown-text {
  color: brown;
}

CODE:

<style>
  body {
    background-color: black;
    font-family: Monospace;
    color: green;
  }
  .pink-text {
    color: pink;
  }
  .blue-text {
    color: blue;
  }
  
  #orange-text {
    color: orange;
    
  }
</style>
<h1 class="pink-text blue-text" id="orange-text">Hello World!</h1>

# Override Class Declarations with Inline Styles



Use an in-line style to try to make our h1 element white. Remember, in line styles look like this:

<h1 style="color: green">


CODE:
</style>
<h1 id="orange-text" class="pink-text blue-text" style="color: white">Hello World!</h1>



# Override All Other Styles by using Important

Yay! We just proved that in-line styles will override all the CSS declarations in your style element.

But wait. There's one last way to override CSS. This is the most powerful method of all. But before we do it, let's talk about why you would ever want to override CSS.

In many situations, you will use CSS libraries. These may accidentally override your own CSS. So when you absolutely need to be sure that an element has specific CSS, you can use !important

An example of how to do this is:

color: red !important;

CODE:

<style>
  .pink-text {
    color: pink !important;
  }
</style>

...snip...

<h1 id="orange-text" class="pink-text blue-text" style="color: white">Hello World!</h1>

# Use Hex Code for Specific Colors

Did you know there are other ways to represent colors in CSS? One of these ways is called hexadecimal code, or hex code for short.

Replace the word black in our body element's background-color with its hex code representation, #000000.

CODE:


<style>
  body {
    background-color: #000000;
  }
</style>




### THINGS LEARNED TODAY:
-Styling an HTML page begins with <style> and ends with </style>

-classes start with . e.g: .class-name { INFO HERE}


-IDs start with # e.g: #ID-NAME {INFO HERE}

-classes are procedural and there can be multiples classes in a CSS/HTML tag.  

-!Important in a class/ID can override any other considerations 

-margins, padding etc.. can be done w/ clockwise notation of margin: 10px 10px 0px 0px



 
 